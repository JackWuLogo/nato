// Code generated by protoc-gen-rpc. DO NOT EDIT.
// source: mem/mem.proto

package mem

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import "context"
import "micro-libs/app"
import "micro-libs/meta"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

const (
	RemoteMethod_Get       = "Remote.Get"
	RemoteMethod_GetFk     = "Remote.GetFk"
	RemoteMethod_Insert    = "Remote.Insert"
	RemoteMethod_Delete    = "Remote.Delete"
	RemoteMethod_SetValue  = "Remote.SetValue"
	RemoteMethod_SetValues = "Remote.SetValues"
)

type RemoteService interface {
	Get(ctx context.Context, req *InMemGet, rsp *OutMemGet) error
	GetFk(ctx context.Context, req *InMemGetFk, rsp *OutMemGetFk) error
	Insert(ctx context.Context, req *InMemInsert, rsp *MemNone) error
	Delete(ctx context.Context, req *InMemDelete, rsp *MemNone) error
	SetValue(ctx context.Context, req *InMemSetValue, rsp *MemNone) error
	SetValues(ctx context.Context, req *InMemSetValues, rsp *MemNone) error
}

type RemoteClient struct {
	name string
}

func (c *RemoteClient) CallNode(ctx context.Context, method string, in interface{}, out interface{}, nodeId ...string) error {
	return app.CallNode(ctx, c.name, method, in, out, nodeId...)
}

func (c *RemoteClient) Get(mt meta.NodeMeta, in *InMemGet) (*OutMemGet, error) {
	out := new(OutMemGet)
	err := app.CallNode(mt.Context(), c.name, RemoteMethod_Get, in, out, mt.Id())
	return out, err
}

func (c *RemoteClient) GetFk(mt meta.NodeMeta, in *InMemGetFk) (*OutMemGetFk, error) {
	out := new(OutMemGetFk)
	err := app.CallNode(mt.Context(), c.name, RemoteMethod_GetFk, in, out, mt.Id())
	return out, err
}

func (c *RemoteClient) Insert(mt meta.NodeMeta, in *InMemInsert) (*MemNone, error) {
	out := new(MemNone)
	err := app.CallNode(mt.Context(), c.name, RemoteMethod_Insert, in, out, mt.Id())
	return out, err
}

func (c *RemoteClient) Delete(mt meta.NodeMeta, in *InMemDelete) (*MemNone, error) {
	out := new(MemNone)
	err := app.CallNode(mt.Context(), c.name, RemoteMethod_Delete, in, out, mt.Id())
	return out, err
}

func (c *RemoteClient) SetValue(mt meta.NodeMeta, in *InMemSetValue) (*MemNone, error) {
	out := new(MemNone)
	err := app.CallNode(mt.Context(), c.name, RemoteMethod_SetValue, in, out, mt.Id())
	return out, err
}

func (c *RemoteClient) SetValues(mt meta.NodeMeta, in *InMemSetValues) (*MemNone, error) {
	out := new(MemNone)
	err := app.CallNode(mt.Context(), c.name, RemoteMethod_SetValues, in, out, mt.Id())
	return out, err
}

func NewRemoteClient(name string) *RemoteClient {
	return &RemoteClient{
		name: name,
	}
}
